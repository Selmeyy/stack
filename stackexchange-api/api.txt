// Signature format: 4.0
package me.tylerbwong.stack.api.di {

  @dagger.Module @dagger.hilt.InstallIn(SingletonComponent::class) public final class ApiModule {
    ctor public ApiModule();
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.AnswerService provideAnswerService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.AuthService provideAuthService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @me.tylerbwong.stack.api.di.BaseUrl public String provideBaseUrl();
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.CommentService provideCommentService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @dagger.multibindings.IntoSet public retrofit2.Converter.Factory provideConverterFactory(kotlinx.serialization.json.Json json);
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.FlagService provideFlagService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.InboxService provideInboxService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @javax.inject.Singleton public kotlinx.serialization.json.Json provideJson();
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.NetworkHotQuestionsService provideNetworkHotQuestionsService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.QuestionService provideQuestionService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @javax.inject.Singleton public retrofit2.Retrofit provideRetrofit(@me.tylerbwong.stack.api.di.BaseUrl String baseUrl, okhttp3.Call.Factory callFactory, java.util.Set<retrofit2.Converter.Factory> converterFactories);
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.SearchService provideSearchService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.SiteService provideSiteService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.TagService provideTagService(retrofit2.Retrofit retrofit);
    method @dagger.Provides @dagger.multibindings.IntoSet public retrofit2.Converter.Factory provideUnitConverterFactory();
    method @dagger.Provides @javax.inject.Singleton public me.tylerbwong.stack.api.service.UserService provideUserService(retrofit2.Retrofit retrofit);
    field public static final me.tylerbwong.stack.api.di.ApiModule.Companion Companion;
  }

  public static final class ApiModule.Companion {
  }

  @javax.inject.Qualifier @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface BaseUrl {
  }

}

package me.tylerbwong.stack.api.model {

  @kotlinx.serialization.Serializable public final class Answer {
    ctor public Answer(@kotlinx.serialization.SerialName("answer_id") int answerId, me.tylerbwong.stack.api.model.User owner, optional @kotlinx.serialization.SerialName("down_vote_count") int downVoteCount, optional @kotlinx.serialization.SerialName("up_vote_count") int upVoteCount, @kotlinx.serialization.SerialName("is_accepted") boolean isAccepted, optional @kotlinx.serialization.SerialName("upvoted") Boolean? isUpvoted, optional @kotlinx.serialization.SerialName("downvoted") Boolean? isDownvoted, int score, @kotlinx.serialization.SerialName("creation_date") long creationDate, optional @kotlinx.serialization.SerialName("body_markdown") String bodyMarkdown, @kotlinx.serialization.SerialName("last_edit_date") Long? lastEditDate, @kotlinx.serialization.SerialName("last_editor") me.tylerbwong.stack.api.model.User? lastEditor, @kotlinx.serialization.SerialName("question_id") int questionId, @kotlinx.serialization.SerialName("comment_count") Integer? commentCount, optional @kotlinx.serialization.SerialName("share_link") String shareLink, optional @kotlinx.serialization.SerialName("title") String title);
    method public int component1();
    method public String component10();
    method public Long? component11();
    method public me.tylerbwong.stack.api.model.User? component12();
    method public int component13();
    method public Integer? component14();
    method public String component15();
    method public String component16();
    method public me.tylerbwong.stack.api.model.User component2();
    method public int component3();
    method public int component4();
    method public boolean component5();
    method public Boolean? component6();
    method public Boolean? component7();
    method public int component8();
    method public long component9();
    method public me.tylerbwong.stack.api.model.Answer copy(int answerId, me.tylerbwong.stack.api.model.User owner, int downVoteCount, int upVoteCount, boolean isAccepted, Boolean? isUpvoted, Boolean? isDownvoted, int score, long creationDate, String bodyMarkdown, Long? lastEditDate, me.tylerbwong.stack.api.model.User? lastEditor, int questionId, Integer? commentCount, String shareLink, String title);
    method public int getAnswerId();
    method public String getBodyMarkdown();
    method public Integer? getCommentCount();
    method public long getCreationDate();
    method public int getDownVoteCount();
    method public Long? getLastEditDate();
    method public me.tylerbwong.stack.api.model.User? getLastEditor();
    method public me.tylerbwong.stack.api.model.User getOwner();
    method public int getQuestionId();
    method public int getScore();
    method public String getShareLink();
    method public String getTitle();
    method public int getUpVoteCount();
    method public boolean isAccepted();
    method public Boolean? isDownvoted();
    method public Boolean? isUpvoted();
    property public final int answerId;
    property public final String bodyMarkdown;
    property public final Integer? commentCount;
    property public final long creationDate;
    property public final int downVoteCount;
    property public final boolean isAccepted;
    property public final Boolean? isDownvoted;
    property public final Boolean? isUpvoted;
    property public final Long? lastEditDate;
    property public final me.tylerbwong.stack.api.model.User? lastEditor;
    property public final me.tylerbwong.stack.api.model.User owner;
    property public final int questionId;
    property public final int score;
    property public final String shareLink;
    property public final String title;
    property public final int upVoteCount;
  }

  @kotlinx.serialization.Serializable public final class Article {
    ctor public Article(@kotlinx.serialization.SerialName("article_id") int id, @kotlinx.serialization.SerialName("article_type") String articleType, @kotlinx.serialization.SerialName("body_markdown") String? bodyMarkdown, @kotlinx.serialization.SerialName("comment_count") Integer? commentCount, @kotlinx.serialization.SerialName("comments") java.util.List<me.tylerbwong.stack.api.model.Comment>? comments, @kotlinx.serialization.SerialName("creation_date") Long? creationDate, @kotlinx.serialization.SerialName("last_activity_date") Long? lastActivityDate, @kotlinx.serialization.SerialName("last_edit_date") Long? lastEditDate, @kotlinx.serialization.SerialName("last_editor") me.tylerbwong.stack.api.model.User? lastEditor, @kotlinx.serialization.SerialName("link") String link, @kotlinx.serialization.SerialName("owner") me.tylerbwong.stack.api.model.User owner, @kotlinx.serialization.SerialName("score") int score, @kotlinx.serialization.SerialName("tags") java.util.List<java.lang.String>? tags, @kotlinx.serialization.SerialName("title") String title, @kotlinx.serialization.SerialName("view_count") int viewCount);
    method public int component1();
    method public String component10();
    method public me.tylerbwong.stack.api.model.User component11();
    method public int component12();
    method public java.util.List<java.lang.String>? component13();
    method public String component14();
    method public int component15();
    method public String component2();
    method public String? component3();
    method public Integer? component4();
    method public java.util.List<me.tylerbwong.stack.api.model.Comment>? component5();
    method public Long? component6();
    method public Long? component7();
    method public Long? component8();
    method public me.tylerbwong.stack.api.model.User? component9();
    method public me.tylerbwong.stack.api.model.Article copy(int id, String articleType, String? bodyMarkdown, Integer? commentCount, java.util.List<me.tylerbwong.stack.api.model.Comment>? comments, Long? creationDate, Long? lastActivityDate, Long? lastEditDate, me.tylerbwong.stack.api.model.User? lastEditor, String link, me.tylerbwong.stack.api.model.User owner, int score, java.util.List<java.lang.String>? tags, String title, int viewCount);
    method public String getArticleType();
    method public String? getBodyMarkdown();
    method public Integer? getCommentCount();
    method public java.util.List<me.tylerbwong.stack.api.model.Comment>? getComments();
    method public Long? getCreationDate();
    method public int getId();
    method public Long? getLastActivityDate();
    method public Long? getLastEditDate();
    method public me.tylerbwong.stack.api.model.User? getLastEditor();
    method public String getLink();
    method public me.tylerbwong.stack.api.model.User getOwner();
    method public int getScore();
    method public java.util.List<java.lang.String>? getTags();
    method public String getTitle();
    method public int getViewCount();
    property public final String articleType;
    property public final String? bodyMarkdown;
    property public final Integer? commentCount;
    property public final java.util.List<me.tylerbwong.stack.api.model.Comment>? comments;
    property public final Long? creationDate;
    property public final int id;
    property public final Long? lastActivityDate;
    property public final Long? lastEditDate;
    property public final me.tylerbwong.stack.api.model.User? lastEditor;
    property public final String link;
    property public final me.tylerbwong.stack.api.model.User owner;
    property public final int score;
    property public final java.util.List<java.lang.String>? tags;
    property public final String title;
    property public final int viewCount;
  }

  @kotlinx.serialization.Serializable public final class Badge {
    ctor public Badge(@kotlinx.serialization.SerialName("award_count") int awardCount, @kotlinx.serialization.SerialName("badge_id") int badgeId, @kotlinx.serialization.SerialName("badge_type") @me.tylerbwong.stack.api.model.BadgeType String badgeType, @kotlinx.serialization.SerialName("description") String description, @kotlinx.serialization.SerialName("link") String link, @kotlinx.serialization.SerialName("name") String name, @kotlinx.serialization.SerialName("rank") @me.tylerbwong.stack.api.model.Rank String rank);
    method public int component1();
    method public int component2();
    method public String component3();
    method public String component4();
    method public String component5();
    method public String component6();
    method public String component7();
    method public me.tylerbwong.stack.api.model.Badge copy(int awardCount, int badgeId, @me.tylerbwong.stack.api.model.BadgeType String badgeType, String description, String link, String name, @me.tylerbwong.stack.api.model.Rank String rank);
    method public int getAwardCount();
    method public int getBadgeId();
    method public String getBadgeType();
    method public String getDescription();
    method public String getLink();
    method public String getName();
    method public String getRank();
    property public final int awardCount;
    property public final int badgeId;
    property public final String badgeType;
    property public final String description;
    property public final String link;
    property public final String name;
    property public final String rank;
  }

  @kotlinx.serialization.Serializable public final class BadgeCounts {
    ctor public BadgeCounts(int bronze, int silver, int gold);
    method public int component1();
    method public int component2();
    method public int component3();
    method public me.tylerbwong.stack.api.model.BadgeCounts copy(int bronze, int silver, int gold);
    method public int getBronze();
    method public int getGold();
    method public int getSilver();
    property public final int bronze;
    property public final int gold;
    property public final int silver;
  }

  public final class BadgeKt {
    field public static final String BRONZE = "bronze";
    field public static final String GOLD = "gold";
    field public static final String NAMED = "named";
    field public static final String SILVER = "silver";
    field public static final String TAG_BASED = "tag_based";
  }

  @StringDef({me.tylerbwong.stack.api.model.BadgeKt.NAMED, me.tylerbwong.stack.api.model.BadgeKt.TAG_BASED}) public @interface BadgeType {
  }

  @kotlinx.serialization.Serializable public final class ClosedDetails {
    ctor public ClosedDetails(@kotlinx.serialization.SerialName("description") String description, optional @kotlinx.serialization.SerialName("original_questions") java.util.List<me.tylerbwong.stack.api.model.OriginalQuestion> originalQuestions, @kotlinx.serialization.SerialName("reason") String reason);
    method public String component1();
    method public java.util.List<me.tylerbwong.stack.api.model.OriginalQuestion> component2();
    method public String component3();
    method public me.tylerbwong.stack.api.model.ClosedDetails copy(String description, java.util.List<me.tylerbwong.stack.api.model.OriginalQuestion> originalQuestions, String reason);
    method public me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason getClosedReason();
    method public String getDescription();
    method public boolean getHasReason();
    method public java.util.List<me.tylerbwong.stack.api.model.OriginalQuestion> getOriginalQuestions();
    method public String getReason();
    property public final me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason closedReason;
    property public final String description;
    property public final boolean hasReason;
    property public final java.util.List<me.tylerbwong.stack.api.model.OriginalQuestion> originalQuestions;
    property public final String reason;
  }

  public enum ClosedDetails.ClosedReason {
    method public final String! getReason();
    method public static me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason valueOf(String value) throws java.lang.IllegalArgumentException, java.lang.NullPointerException;
    method public static me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason[] values();
    property public final String! reason;
    enum_constant public static final me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason DUPLICATE;
    enum_constant public static final me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason NEEDS_DETAILS;
    enum_constant public static final me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason NEEDS_FOCUS;
    enum_constant public static final me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason NOT_SUITABLE;
    enum_constant public static final me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason OPINION_BASED;
    enum_constant public static final me.tylerbwong.stack.api.model.ClosedDetails.ClosedReason UNKNOWN;
  }

  @kotlinx.serialization.Serializable public final class Comment {
    ctor public Comment(optional @kotlinx.serialization.SerialName("body_markdown") String bodyMarkdown, optional @kotlinx.serialization.SerialName("comment_id") Integer? commentId, optional @kotlinx.serialization.SerialName("post_id") Integer? postId, @kotlinx.serialization.SerialName("creation_date") long creationDate, boolean edited, @kotlinx.serialization.SerialName("owner") me.tylerbwong.stack.api.model.User owner, optional Integer? score, optional Boolean? upvoted);
    method public String component1();
    method public Integer? component2();
    method public Integer? component3();
    method public long component4();
    method public boolean component5();
    method public me.tylerbwong.stack.api.model.User component6();
    method public Integer? component7();
    method public Boolean? component8();
    method public me.tylerbwong.stack.api.model.Comment copy(String bodyMarkdown, Integer? commentId, Integer? postId, long creationDate, boolean edited, me.tylerbwong.stack.api.model.User owner, Integer? score, Boolean? upvoted);
    method public String getBodyMarkdown();
    method public Integer? getCommentId();
    method public long getCreationDate();
    method public boolean getEdited();
    method public me.tylerbwong.stack.api.model.User getOwner();
    method public Integer? getPostId();
    method public Integer? getScore();
    method public Boolean? getUpvoted();
    property public final String bodyMarkdown;
    property public final Integer? commentId;
    property public final long creationDate;
    property public final boolean edited;
    property public final me.tylerbwong.stack.api.model.User owner;
    property public final Integer? postId;
    property public final Integer? score;
    property public final Boolean? upvoted;
  }

  @kotlinx.serialization.Serializable public final class ErrorResponse {
    ctor public ErrorResponse(optional @kotlinx.serialization.SerialName("error_id") int errorId, optional @kotlinx.serialization.SerialName("error_message") String errorMessage, optional @kotlinx.serialization.SerialName("error_name") String errorName);
    method public int component1();
    method public String component2();
    method public String component3();
    method public me.tylerbwong.stack.api.model.ErrorResponse copy(int errorId, String errorMessage, String errorName);
    method public int getErrorId();
    method public String getErrorMessage();
    method public String getErrorName();
    property public final int errorId;
    property public final String errorMessage;
    property public final String errorName;
  }

  @kotlinx.serialization.Serializable public final class FlagOption {
    ctor public FlagOption(@kotlinx.serialization.SerialName("count") Integer? count, @kotlinx.serialization.SerialName("description") String? description, @kotlinx.serialization.SerialName("dialog_title") String? dialogTitle, @kotlinx.serialization.SerialName("has_flagged") Boolean? hasFlagged, @kotlinx.serialization.SerialName("is_retraction") Boolean? isRetraction, @kotlinx.serialization.SerialName("option_id") Integer? optionId, @kotlinx.serialization.SerialName("requires_comment") Boolean? requiresComment, @kotlinx.serialization.SerialName("requires_question_id") Boolean? requiresQuestionId, @kotlinx.serialization.SerialName("requires_site") Boolean? requiresSite, @kotlinx.serialization.SerialName("sub_options") java.util.List<me.tylerbwong.stack.api.model.FlagOption>? subOptions, @kotlinx.serialization.SerialName("title") String? title);
    method public Integer? component1();
    method public java.util.List<me.tylerbwong.stack.api.model.FlagOption>? component10();
    method public String? component11();
    method public String? component2();
    method public String? component3();
    method public Boolean? component4();
    method public Boolean? component5();
    method public Integer? component6();
    method public Boolean? component7();
    method public Boolean? component8();
    method public Boolean? component9();
    method public me.tylerbwong.stack.api.model.FlagOption copy(Integer? count, String? description, String? dialogTitle, Boolean? hasFlagged, Boolean? isRetraction, Integer? optionId, Boolean? requiresComment, Boolean? requiresQuestionId, Boolean? requiresSite, java.util.List<me.tylerbwong.stack.api.model.FlagOption>? subOptions, String? title);
    method public Integer? getCount();
    method public String? getDescription();
    method public String? getDialogTitle();
    method public Boolean? getHasFlagged();
    method public Integer? getOptionId();
    method public Boolean? getRequiresComment();
    method public Boolean? getRequiresQuestionId();
    method public Boolean? getRequiresSite();
    method public java.util.List<me.tylerbwong.stack.api.model.FlagOption>? getSubOptions();
    method public String? getTitle();
    method public Boolean? isRetraction();
    property public final Integer? count;
    property public final String? description;
    property public final String? dialogTitle;
    property public final Boolean? hasFlagged;
    property public final Boolean? isRetraction;
    property public final Integer? optionId;
    property public final Boolean? requiresComment;
    property public final Boolean? requiresQuestionId;
    property public final Boolean? requiresSite;
    property public final java.util.List<me.tylerbwong.stack.api.model.FlagOption>? subOptions;
    property public final String? title;
  }

  @kotlinx.serialization.Serializable public final class InboxItem {
    ctor public InboxItem(@kotlinx.serialization.SerialName("answer_id") Integer? answerId, @kotlinx.serialization.SerialName("body") String? body, @kotlinx.serialization.SerialName("comment_id") Integer? commentId, @kotlinx.serialization.SerialName("creation_date") long creationDate, @kotlinx.serialization.SerialName("is_unread") boolean isUnread, @kotlinx.serialization.SerialName("item_type") String itemType, @kotlinx.serialization.SerialName("link") String link, @kotlinx.serialization.SerialName("question_id") Integer? questionId, @kotlinx.serialization.SerialName("site") me.tylerbwong.stack.api.model.Site? site, @kotlinx.serialization.SerialName("title") String? title);
    method public Integer? component1();
    method public String? component10();
    method public String? component2();
    method public Integer? component3();
    method public long component4();
    method public boolean component5();
    method public String component6();
    method public String component7();
    method public Integer? component8();
    method public me.tylerbwong.stack.api.model.Site? component9();
    method public me.tylerbwong.stack.api.model.InboxItem copy(Integer? answerId, String? body, Integer? commentId, long creationDate, boolean isUnread, String itemType, String link, Integer? questionId, me.tylerbwong.stack.api.model.Site? site, String? title);
    method public Integer? getAnswerId();
    method public String? getBody();
    method public Integer? getCommentId();
    method public long getCreationDate();
    method public String getItemType();
    method public String getLink();
    method public Integer? getQuestionId();
    method public me.tylerbwong.stack.api.model.Site? getSite();
    method public String? getTitle();
    method public boolean isUnread();
    method public void setQuestionId(Integer?);
    property public final Integer? answerId;
    property public final String? body;
    property public final Integer? commentId;
    property public final long creationDate;
    property public final boolean isUnread;
    property public final String itemType;
    property public final String link;
    property public final Integer? questionId;
    property public final me.tylerbwong.stack.api.model.Site? site;
    property public final String? title;
  }

  @kotlinx.serialization.Serializable public final class NetworkHotQuestion {
    ctor public NetworkHotQuestion(@kotlinx.serialization.SerialName("site") String site, @kotlinx.serialization.SerialName("question_id") int questionId, @kotlinx.serialization.SerialName("title") String title, @kotlinx.serialization.SerialName("display_score") double displayScore, @kotlinx.serialization.SerialName("icon_url") String iconUrl, @kotlinx.serialization.SerialName("creation_date") long creationDate, @kotlinx.serialization.SerialName("answer_count") int answerCount, @kotlinx.serialization.SerialName("user_name") String userName, @kotlinx.serialization.SerialName("tags") java.util.List<java.lang.String> tags);
    method public String component1();
    method public int component2();
    method public String component3();
    method public double component4();
    method public String component5();
    method public long component6();
    method public int component7();
    method public String component8();
    method public java.util.List<java.lang.String> component9();
    method public me.tylerbwong.stack.api.model.NetworkHotQuestion copy(String site, int questionId, String title, double displayScore, String iconUrl, long creationDate, int answerCount, String userName, java.util.List<java.lang.String> tags);
    method public int getAnswerCount();
    method public long getCreationDate();
    method public double getDisplayScore();
    method public String getIconUrl();
    method public int getQuestionId();
    method public String getSite();
    method public java.util.List<java.lang.String> getTags();
    method public String getTitle();
    method public String getUserName();
    property public final int answerCount;
    property public final long creationDate;
    property public final double displayScore;
    property public final String iconUrl;
    property public final int questionId;
    property public final String site;
    property public final java.util.List<java.lang.String> tags;
    property public final String title;
    property public final String userName;
  }

  @kotlinx.serialization.Serializable public final class NetworkPost {
    ctor public NetworkPost(@kotlinx.serialization.SerialName("post_id") int postId, @kotlinx.serialization.SerialName("post_type") String postType, @kotlinx.serialization.SerialName("score") int score, @kotlinx.serialization.SerialName("title") String title);
    method public int component1();
    method public String component2();
    method public int component3();
    method public String component4();
    method public me.tylerbwong.stack.api.model.NetworkPost copy(int postId, String postType, int score, String title);
    method public int getPostId();
    method public String getPostType();
    method public int getScore();
    method public String getTitle();
    property public final int postId;
    property public final String postType;
    property public final int score;
    property public final String title;
  }

  @kotlinx.serialization.Serializable public final class NetworkUser {
    ctor public NetworkUser(@kotlinx.serialization.SerialName("account_id") Integer? accountId, optional @kotlinx.serialization.SerialName("reputation") int reputation, @kotlinx.serialization.SerialName("site_name") String siteName, @kotlinx.serialization.SerialName("site_url") String siteUrl, optional @kotlinx.serialization.SerialName("user_id") int userId, @kotlinx.serialization.SerialName("user_type") String userType, @kotlinx.serialization.SerialName("badge_counts") me.tylerbwong.stack.api.model.BadgeCounts? badgeCounts, @kotlinx.serialization.SerialName("creation_date") long creationDate, @kotlinx.serialization.SerialName("last_access_date") long lastAccessDate, @kotlinx.serialization.SerialName("question_count") int questionCount, @kotlinx.serialization.SerialName("top_answers") java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? topAnswers, @kotlinx.serialization.SerialName("top_questions") java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? topQuestions);
    method public Integer? component1();
    method public int component10();
    method public java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? component11();
    method public java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? component12();
    method public int component2();
    method public String component3();
    method public String component4();
    method public int component5();
    method public String component6();
    method public me.tylerbwong.stack.api.model.BadgeCounts? component7();
    method public long component8();
    method public long component9();
    method public me.tylerbwong.stack.api.model.NetworkUser copy(Integer? accountId, int reputation, String siteName, String siteUrl, int userId, String userType, me.tylerbwong.stack.api.model.BadgeCounts? badgeCounts, long creationDate, long lastAccessDate, int questionCount, java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? topAnswers, java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? topQuestions);
    method public Integer? getAccountId();
    method public me.tylerbwong.stack.api.model.BadgeCounts? getBadgeCounts();
    method public long getCreationDate();
    method public long getLastAccessDate();
    method public int getQuestionCount();
    method public int getReputation();
    method public String getSiteName();
    method public String getSiteUrl();
    method public java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? getTopAnswers();
    method public java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? getTopQuestions();
    method public int getUserId();
    method public String getUserType();
    property public final Integer? accountId;
    property public final me.tylerbwong.stack.api.model.BadgeCounts? badgeCounts;
    property public final long creationDate;
    property public final long lastAccessDate;
    property public final int questionCount;
    property public final int reputation;
    property public final String siteName;
    property public final String siteUrl;
    property public final java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? topAnswers;
    property public final java.util.List<me.tylerbwong.stack.api.model.NetworkPost>? topQuestions;
    property public final int userId;
    property public final String userType;
  }

  @StringDef({me.tylerbwong.stack.api.model.OrderKt.DESC, me.tylerbwong.stack.api.model.OrderKt.ASC}) public @interface Order {
  }

  public final class OrderKt {
    field public static final String ASC = "asc";
    field public static final String DESC = "desc";
    field public static final String ORDER_PARAM = "order";
  }

  @kotlinx.serialization.Serializable public final class OriginalQuestion {
    ctor public OriginalQuestion(optional @kotlinx.serialization.SerialName("accepted_answer_id") Integer? acceptedAnswerId, @kotlinx.serialization.SerialName("answer_count") int answerCount, @kotlinx.serialization.SerialName("question_id") int questionId, @kotlinx.serialization.SerialName("title") String title);
    method public Integer? component1();
    method public int component2();
    method public int component3();
    method public String component4();
    method public me.tylerbwong.stack.api.model.OriginalQuestion copy(Integer? acceptedAnswerId, int answerCount, int questionId, String title);
    method public Integer? getAcceptedAnswerId();
    method public int getAnswerCount();
    method public int getQuestionId();
    method public String getTitle();
    property public final Integer? acceptedAnswerId;
    property public final int answerCount;
    property public final int questionId;
    property public final String title;
  }

  @StringDef({me.tylerbwong.stack.api.model.TimelineEventKt.QUESTION, me.tylerbwong.stack.api.model.TimelineEventKt.ANSWER}) public @interface PostType {
  }

  @kotlinx.serialization.Serializable public final class PostedAnswer {
    ctor public PostedAnswer(@kotlinx.serialization.SerialName("answer_id") int answerId, me.tylerbwong.stack.api.model.User owner, optional @kotlinx.serialization.SerialName("down_vote_count") int downVoteCount, optional @kotlinx.serialization.SerialName("up_vote_count") int upVoteCount, @kotlinx.serialization.SerialName("is_accepted") boolean isAccepted, int score, @kotlinx.serialization.SerialName("creation_date") long creationDate, @kotlinx.serialization.SerialName("last_edit_date") Long? lastEditDate, @kotlinx.serialization.SerialName("question_id") int questionId, @kotlinx.serialization.SerialName("comment_count") Integer? commentCount);
    method public int component1();
    method public Integer? component10();
    method public me.tylerbwong.stack.api.model.User component2();
    method public int component3();
    method public int component4();
    method public boolean component5();
    method public int component6();
    method public long component7();
    method public Long? component8();
    method public int component9();
    method public me.tylerbwong.stack.api.model.PostedAnswer copy(int answerId, me.tylerbwong.stack.api.model.User owner, int downVoteCount, int upVoteCount, boolean isAccepted, int score, long creationDate, Long? lastEditDate, int questionId, Integer? commentCount);
    method public int getAnswerId();
    method public Integer? getCommentCount();
    method public long getCreationDate();
    method public int getDownVoteCount();
    method public Long? getLastEditDate();
    method public me.tylerbwong.stack.api.model.User getOwner();
    method public int getQuestionId();
    method public int getScore();
    method public int getUpVoteCount();
    method public boolean isAccepted();
    property public final int answerId;
    property public final Integer? commentCount;
    property public final long creationDate;
    property public final int downVoteCount;
    property public final boolean isAccepted;
    property public final Long? lastEditDate;
    property public final me.tylerbwong.stack.api.model.User owner;
    property public final int questionId;
    property public final int score;
    property public final int upVoteCount;
  }

  @kotlinx.serialization.Serializable public final class Question {
    ctor public Question(optional @kotlinx.serialization.SerialName("answer_count") int answerCount, String? body, @kotlinx.serialization.SerialName("body_markdown") String? bodyMarkdown, @kotlinx.serialization.SerialName("closed_date") Long? closedDate, @kotlinx.serialization.SerialName("closed_reason") String? closedReason, optional @kotlinx.serialization.SerialName("closed_details") me.tylerbwong.stack.api.model.ClosedDetails? closedDetails, @kotlinx.serialization.SerialName("comment_count") Integer? commentCount, @kotlinx.serialization.SerialName("creation_date") long creationDate, optional @kotlinx.serialization.SerialName("down_vote_count") int downVoteCount, optional @kotlinx.serialization.SerialName("downvoted") boolean isDownVoted, optional @kotlinx.serialization.SerialName("favorited") boolean isBookmarked, optional @kotlinx.serialization.SerialName("favorite_count") int bookmarkCount, @kotlinx.serialization.SerialName("is_answered") boolean isAnswered, @kotlinx.serialization.SerialName("last_activity_date") Long? lastActivityDate, @kotlinx.serialization.SerialName("last_edit_date") Long? lastEditDate, @kotlinx.serialization.SerialName("last_editor") me.tylerbwong.stack.api.model.User? lastEditor, me.tylerbwong.stack.api.model.User owner, optional @kotlinx.serialization.SerialName("question_id") int questionId, int score, optional @kotlinx.serialization.SerialName("share_link") String shareLink, java.util.List<java.lang.String>? tags, String title, optional @kotlinx.serialization.SerialName("up_vote_count") int upVoteCount, optional @kotlinx.serialization.SerialName("upvoted") boolean isUpVoted, optional @kotlinx.serialization.SerialName("view_count") int viewCount);
    method public int component1();
    method public boolean component10();
    method public boolean component11();
    method public int component12();
    method public boolean component13();
    method public Long? component14();
    method public Long? component15();
    method public me.tylerbwong.stack.api.model.User? component16();
    method public me.tylerbwong.stack.api.model.User component17();
    method public int component18();
    method public int component19();
    method public String? component2();
    method public String component20();
    method public java.util.List<java.lang.String>? component21();
    method public String component22();
    method public int component23();
    method public boolean component24();
    method public int component25();
    method public String? component3();
    method public Long? component4();
    method public String? component5();
    method public me.tylerbwong.stack.api.model.ClosedDetails? component6();
    method public Integer? component7();
    method public long component8();
    method public int component9();
    method public me.tylerbwong.stack.api.model.Question copy(int answerCount, String? body, String? bodyMarkdown, Long? closedDate, String? closedReason, me.tylerbwong.stack.api.model.ClosedDetails? closedDetails, Integer? commentCount, long creationDate, int downVoteCount, boolean isDownVoted, boolean isBookmarked, int bookmarkCount, boolean isAnswered, Long? lastActivityDate, Long? lastEditDate, me.tylerbwong.stack.api.model.User? lastEditor, me.tylerbwong.stack.api.model.User owner, int questionId, int score, String shareLink, java.util.List<java.lang.String>? tags, String title, int upVoteCount, boolean isUpVoted, int viewCount);
    method public int getAnswerCount();
    method public String? getBody();
    method public String? getBodyMarkdown();
    method public int getBookmarkCount();
    method public Long? getClosedDate();
    method public me.tylerbwong.stack.api.model.ClosedDetails? getClosedDetails();
    method public String? getClosedReason();
    method public Integer? getCommentCount();
    method public long getCreationDate();
    method public int getDownVoteCount();
    method public Long? getLastActivityDate();
    method public Long? getLastEditDate();
    method public me.tylerbwong.stack.api.model.User? getLastEditor();
    method public me.tylerbwong.stack.api.model.User getOwner();
    method public int getQuestionId();
    method public int getScore();
    method public String getShareLink();
    method public java.util.List<java.lang.String>? getTags();
    method public String getTitle();
    method public int getUpVoteCount();
    method public int getViewCount();
    method public boolean isAnswered();
    method public boolean isBookmarked();
    method public boolean isDownVoted();
    method public boolean isUpVoted();
    property public final int answerCount;
    property public final String? body;
    property public final String? bodyMarkdown;
    property public final int bookmarkCount;
    property public final Long? closedDate;
    property public final me.tylerbwong.stack.api.model.ClosedDetails? closedDetails;
    property public final String? closedReason;
    property public final Integer? commentCount;
    property public final long creationDate;
    property public final int downVoteCount;
    property public final boolean isAnswered;
    property public final boolean isBookmarked;
    property public final boolean isDownVoted;
    property public final boolean isUpVoted;
    property public final Long? lastActivityDate;
    property public final Long? lastEditDate;
    property public final me.tylerbwong.stack.api.model.User? lastEditor;
    property public final me.tylerbwong.stack.api.model.User owner;
    property public final int questionId;
    property public final int score;
    property public final String shareLink;
    property public final java.util.List<java.lang.String>? tags;
    property public final String title;
    property public final int upVoteCount;
    property public final int viewCount;
  }

  @StringDef({me.tylerbwong.stack.api.model.BadgeKt.GOLD, me.tylerbwong.stack.api.model.BadgeKt.SILVER, me.tylerbwong.stack.api.model.BadgeKt.BRONZE}) public @interface Rank {
  }

  @kotlinx.serialization.Serializable public final class Response<T> {
    ctor public Response(optional @kotlinx.serialization.SerialName("items") java.util.List<? extends T> items, optional @kotlinx.serialization.SerialName("has_more") boolean hasMore);
    method public java.util.List<T> component1();
    method public boolean component2();
    method public me.tylerbwong.stack.api.model.Response<T> copy(java.util.List<? extends T> items, boolean hasMore);
    method public boolean getHasMore();
    method public java.util.List<T> getItems();
    property public final boolean hasMore;
    property public final java.util.List<T> items;
    field public static final me.tylerbwong.stack.api.model.Response.Companion Companion;
  }

  public static final class Response.Companion {
    method public me.tylerbwong.stack.api.model.Response<kotlin.Unit> getEMPTY();
    property public final me.tylerbwong.stack.api.model.Response<kotlin.Unit> EMPTY;
  }

  @kotlinx.serialization.Serializable public final class Site {
    ctor public Site(@kotlinx.serialization.SerialName("name") String name, @kotlinx.serialization.SerialName("api_site_parameter") String parameter, @kotlinx.serialization.SerialName("site_url") String url, @kotlinx.serialization.SerialName("audience") String audience, @kotlinx.serialization.SerialName("icon_url") String iconUrl);
    method public String component1();
    method public String component2();
    method public String component3();
    method public String component4();
    method public String component5();
    method public me.tylerbwong.stack.api.model.Site copy(String name, String parameter, String url, String audience, String iconUrl);
    method public String getAudience();
    method public String getIconUrl();
    method public String getName();
    method public String getParameter();
    method public String getUrl();
    method public boolean isUserRegistered();
    method public void setUserRegistered(boolean);
    property public final String audience;
    property public final String iconUrl;
    property public final boolean isUserRegistered;
    property public final String name;
    property public final String parameter;
    property public final String url;
  }

  @StringDef({me.tylerbwong.stack.api.model.SortKt.CREATION, me.tylerbwong.stack.api.model.SortKt.ACTIVITY, me.tylerbwong.stack.api.model.SortKt.VOTES, me.tylerbwong.stack.api.model.SortKt.HOT, me.tylerbwong.stack.api.model.SortKt.WEEK, me.tylerbwong.stack.api.model.SortKt.MONTH, me.tylerbwong.stack.api.model.SortKt.RELEVANCE}) public @interface Sort {
  }

  public final class SortKt {
    method @StringRes public static int getSortResourceId(String);
    field public static final String ACTIVITY = "activity";
    field public static final String CREATION = "creation";
    field public static final String HOT = "hot";
    field public static final String MONTH = "month";
    field public static final String RELEVANCE = "relevance";
    field public static final String SORT_PARAM = "sort";
    field public static final String VOTES = "votes";
    field public static final String WEEK = "week";
  }

  @kotlinx.serialization.Serializable public final class Tag {
    ctor public Tag(@kotlinx.serialization.SerialName("name") String name, @kotlinx.serialization.SerialName("count") int count);
    method public String component1();
    method public int component2();
    method public me.tylerbwong.stack.api.model.Tag copy(String name, int count);
    method public int getCount();
    method public String getName();
    property public final int count;
    property public final String name;
  }

  @kotlinx.serialization.Serializable public final class TagPreference {
    ctor public TagPreference(@kotlinx.serialization.SerialName("tag_name") String tagName, @kotlinx.serialization.SerialName("tag_preference_type") String tagPreferenceType);
    method public String component1();
    method public String component2();
    method public me.tylerbwong.stack.api.model.TagPreference copy(String tagName, String tagPreferenceType);
    method public String getTagName();
    method public String getTagPreferenceType();
    property public final String tagName;
    property public final String tagPreferenceType;
  }

  @kotlinx.serialization.Serializable public final class TimelineEvent {
    ctor public TimelineEvent(@kotlinx.serialization.SerialName("badge_id") Integer? badgeId, @kotlinx.serialization.SerialName("comment_id") Integer? commentId, @kotlinx.serialization.SerialName("creation_date") long creationDate, @kotlinx.serialization.SerialName("detail") String? detail, @kotlinx.serialization.SerialName("link") String link, @kotlinx.serialization.SerialName("post_id") Integer? postId, @kotlinx.serialization.SerialName("post_type") @me.tylerbwong.stack.api.model.PostType String? postType, @kotlinx.serialization.SerialName("suggested_edit_id") Integer? suggestedEditId, @kotlinx.serialization.SerialName("timeline_type") @me.tylerbwong.stack.api.model.TimelineType String timelineType, @kotlinx.serialization.SerialName("title") String? title, @kotlinx.serialization.SerialName("user_id") int userId);
    method public Integer? component1();
    method public String? component10();
    method public int component11();
    method public Integer? component2();
    method public long component3();
    method public String? component4();
    method public String component5();
    method public Integer? component6();
    method public String? component7();
    method public Integer? component8();
    method public String component9();
    method public me.tylerbwong.stack.api.model.TimelineEvent copy(Integer? badgeId, Integer? commentId, long creationDate, String? detail, String link, Integer? postId, @me.tylerbwong.stack.api.model.PostType String? postType, Integer? suggestedEditId, @me.tylerbwong.stack.api.model.TimelineType String timelineType, String? title, int userId);
    method public Integer? getBadgeId();
    method public Integer? getCommentId();
    method public long getCreationDate();
    method public String? getDetail();
    method public String getLink();
    method public Integer? getPostId();
    method public String? getPostType();
    method public Integer? getSuggestedEditId();
    method public String getTimelineType();
    method public String? getTitle();
    method public int getUserId();
    property public final Integer? badgeId;
    property public final Integer? commentId;
    property public final long creationDate;
    property public final String? detail;
    property public final String link;
    property public final Integer? postId;
    property public final String? postType;
    property public final Integer? suggestedEditId;
    property public final String timelineType;
    property public final String? title;
    property public final int userId;
  }

  public final class TimelineEventKt {
    field public static final String ACCEPTED = "accepted";
    field public static final String ANSWER = "answer";
    field public static final String ANSWERED = "answered";
    field public static final String ASKED = "asked";
    field public static final String BADGE = "badge";
    field public static final String COMMENTED = "commented";
    field public static final String QUESTION = "question";
    field public static final String REVIEWED = "reviewed";
    field public static final String REVISION = "revision";
    field public static final String SUGGESTED = "suggested";
  }

  @StringDef({me.tylerbwong.stack.api.model.TimelineEventKt.COMMENTED, me.tylerbwong.stack.api.model.TimelineEventKt.ASKED, me.tylerbwong.stack.api.model.TimelineEventKt.ANSWERED, me.tylerbwong.stack.api.model.TimelineEventKt.BADGE, me.tylerbwong.stack.api.model.TimelineEventKt.REVISION, me.tylerbwong.stack.api.model.TimelineEventKt.ACCEPTED, me.tylerbwong.stack.api.model.TimelineEventKt.REVIEWED, me.tylerbwong.stack.api.model.TimelineEventKt.SUGGESTED}) public @interface TimelineType {
  }

  @kotlinx.serialization.Serializable public final class User {
    ctor public User(@kotlinx.serialization.SerialName("about_me") String? aboutMe, @kotlinx.serialization.SerialName("accept_rate") Integer? acceptRate, @kotlinx.serialization.SerialName("account_id") Integer? accountId, @kotlinx.serialization.SerialName("display_name") String displayName, @kotlinx.serialization.SerialName("link") String? link, @kotlinx.serialization.SerialName("location") String? location, @kotlinx.serialization.SerialName("profile_image") String? profileImage, optional @kotlinx.serialization.SerialName("reputation") int reputation, optional @kotlinx.serialization.SerialName("user_id") int userId, @kotlinx.serialization.SerialName("user_type") String userType, @kotlinx.serialization.SerialName("badge_counts") me.tylerbwong.stack.api.model.BadgeCounts? badgeCounts);
    method public String? component1();
    method public String component10();
    method public me.tylerbwong.stack.api.model.BadgeCounts? component11();
    method public Integer? component2();
    method public Integer? component3();
    method public String component4();
    method public String? component5();
    method public String? component6();
    method public String? component7();
    method public int component8();
    method public int component9();
    method public me.tylerbwong.stack.api.model.User copy(String? aboutMe, Integer? acceptRate, Integer? accountId, String displayName, String? link, String? location, String? profileImage, int reputation, int userId, String userType, me.tylerbwong.stack.api.model.BadgeCounts? badgeCounts);
    method public String? getAboutMe();
    method public Integer? getAcceptRate();
    method public Integer? getAccountId();
    method public me.tylerbwong.stack.api.model.BadgeCounts? getBadgeCounts();
    method public String getDisplayName();
    method public String? getLink();
    method public String? getLocation();
    method public String? getProfileImage();
    method public int getReputation();
    method public int getUserId();
    method public String getUserType();
    property public final String? aboutMe;
    property public final Integer? acceptRate;
    property public final Integer? accountId;
    property public final me.tylerbwong.stack.api.model.BadgeCounts? badgeCounts;
    property public final String displayName;
    property public final String? link;
    property public final String? location;
    property public final String? profileImage;
    property public final int reputation;
    property public final int userId;
    property public final String userType;
  }

}

package me.tylerbwong.stack.api.service {

  public interface AnswerService {
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("answers/{id}/downvote") public suspend Object? downvoteAnswerById(@retrofit2.http.Path("id") int answerId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Answer>>);
    method @retrofit2.http.GET("answers/{id}") public suspend Object? getAnswerByIdAuth(@retrofit2.http.Path("id") int answerId, optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.SITE_PARAM) String? site, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Answer>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("answers/{id}/downvote/undo") public suspend Object? undoAnswerDownvoteById(@retrofit2.http.Path("id") int answerId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Answer>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("answers/{id}/upvote/undo") public suspend Object? undoAnswerUpvoteById(@retrofit2.http.Path("id") int answerId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Answer>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("answers/{id}/upvote") public suspend Object? upvoteAnswerById(@retrofit2.http.Path("id") int answerId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Answer>>);
    field public static final String ANSWER_FILTER = "!HzgO6Jg6sME4H_1vS70d6DFK5mYr)2q1N44cbmn5TW)L6gY9nV-Fj8ZYP1cBg6yrUwoXjNbrH5Z**AZ0K6WAi(e*BgAoz";
    field public static final String ANSWER_FILTER_AUTH = "!)aHQ9FGlxVZ-FDR2obogNxnqETJo9DXW96Zvv3FLjN(pPDs04v10AoUeW*Sb9Wk7MEfS51yyUe8irkMLAlVu0.uRXjY";
    field public static final me.tylerbwong.stack.api.service.AnswerService.Companion Companion;
  }

  public static final class AnswerService.Companion {
  }

  public interface ArticleService {
    method @retrofit2.http.GET("articles/{id}") public suspend Object? getArticleDetails(@retrofit2.http.Path("id") int id, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Article>>);
    method @retrofit2.http.GET("articles") public suspend Object? getArticles(optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Article>>);
    field public static final String ARTICLE_DETAILS_FILTER = "!szxkzhQVWO(uj0YS--Po1KjfkZukp)f";
    field public static final String ARTICLE_FEED_FILTER = "!Fc6b6ofEc7uJRx9sto9vvle2kz";
    field public static final me.tylerbwong.stack.api.service.ArticleService.Companion Companion;
  }

  public static final class ArticleService.Companion {
  }

  public interface AuthService {
    method @retrofit2.http.GET("access-tokens/{accessToken}/invalidate") public suspend Object? logOut(@retrofit2.http.Path(me.tylerbwong.stack.api.service.StackConstantsKt.ACCESS_TOKEN) String accessToken, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super kotlin.Unit>);
  }

  public interface CommentService {
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("posts/{id}/comments/add") public suspend Object? addComment(@retrofit2.http.Path("id") int postId, @retrofit2.http.Field(me.tylerbwong.stack.api.service.QuestionService.BODY_PARAM) String body, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Comment>>);
    method @retrofit2.http.GET("posts/{id}/comments") public suspend Object? getPostComments(@retrofit2.http.Path("id") int postId, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Comment>>);
    method @retrofit2.http.GET("posts/{id}/comments") public suspend Object? getPostCommentsAuth(@retrofit2.http.Path("id") int postId, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Comment>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("comments/{id}/upvote/undo") public suspend Object? undoUpvoteComment(@retrofit2.http.Path("id") int commentId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Comment>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("comments/{id}/upvote") public suspend Object? upvoteComment(@retrofit2.http.Path("id") int commentId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Comment>>);
    field public static final String COMMENTS_FILTER = "!L8StSPzV0U0)z0AORjbSP2D5RygsAsRFu7EKUgPZ6hbH)YC_S_mZJdz(*.y2xYh0QPq6";
    field public static final String COMMENTS_FILTER_AUTH = "!)pfJrS0ZPMUmIMpNO)Yke6OecqSjv9ILyIMzhIz6XW5PAELLlGsc(-cn4aL4Utv5ur";
    field public static final me.tylerbwong.stack.api.service.CommentService.Companion Companion;
  }

  public static final class CommentService.Companion {
  }

  public interface FlagService {
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("answers/{id}/flags/add") public suspend Object? addAnswerFlag(@retrofit2.http.Path("id") int id, @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.OPTION_PARAM) int optionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.COMMENT_PARAM) String? comment, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.TARGET_SITE_PARAM) String? targetSite, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.QUESTION_ID_PARAM) Integer? questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Answer>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("comments/{id}/flags/add") public suspend Object? addCommentFlag(@retrofit2.http.Path("id") int id, @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.OPTION_PARAM) int optionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.COMMENT_PARAM) String? comment, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.TARGET_SITE_PARAM) String? targetSite, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.QUESTION_ID_PARAM) Integer? questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Comment>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("questions/{id}/flags/add") public suspend Object? addQuestionFlag(@retrofit2.http.Path("id") int id, @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.OPTION_PARAM) int optionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.COMMENT_PARAM) String? comment, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.TARGET_SITE_PARAM) String? targetSite, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.FlagService.QUESTION_ID_PARAM) Integer? questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.GET("answers/{id}/flags/options") public suspend Object? getAnswerFlagOptions(@retrofit2.http.Path("id") int id, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.FlagOption>>);
    method @retrofit2.http.GET("comments/{id}/flags/options") public suspend Object? getCommentFlagOptions(@retrofit2.http.Path("id") int id, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.FlagOption>>);
    method @retrofit2.http.GET("questions/{id}/flags/options") public suspend Object? getQuestionFlagOptions(@retrofit2.http.Path("id") int id, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.FlagOption>>);
    field public static final String COMMENT_PARAM = "comment";
    field public static final me.tylerbwong.stack.api.service.FlagService.Companion Companion;
    field public static final String FLAG_FILTER = "!nOedRLgr.z";
    field public static final String OPTION_PARAM = "option_id";
    field public static final String QUESTION_ID_PARAM = "question_id";
    field public static final String TARGET_SITE_PARAM = "target_site";
  }

  public static final class FlagService.Companion {
  }

  public interface InboxService {
    method @retrofit2.http.GET("inbox") public suspend Object? getInbox(optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.InboxItem>>);
    field public static final me.tylerbwong.stack.api.service.InboxService.Companion Companion;
    field public static final String INBOX_FILTER = "!FmdZhk)FozDf*_(motx6Ztdnab";
  }

  public static final class InboxService.Companion {
  }

  public interface NetworkHotQuestionsService {
    method @retrofit2.http.GET("hot-questions-json") public suspend Object? getHotNetworkQuestions(kotlin.coroutines.Continuation<? super java.util.List<? extends me.tylerbwong.stack.api.model.NetworkHotQuestion>>);
  }

  public interface QuestionService {
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("questions/add") public suspend Object? addQuestion(@retrofit2.http.Field(me.tylerbwong.stack.api.service.QuestionService.TITLE_PARAM) String title, @retrofit2.http.Field(me.tylerbwong.stack.api.service.QuestionService.BODY_PARAM) String body, @retrofit2.http.Field(me.tylerbwong.stack.api.service.QuestionService.TAGS_PARAM) String tags, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("questions/{id}/downvote") public suspend Object? downvoteQuestionById(@retrofit2.http.Path("id") int questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("questions/{id}/favorite") public suspend Object? favoriteQuestionById(@retrofit2.http.Path("id") int questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.GET("me/favorites") public suspend Object? getBookmarks(optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.GET("questions/{id}/linked") public suspend Object? getLinkedQuestions(@retrofit2.http.Path("id") int questionId, optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.GET("questions/{id}/answers") public suspend Object? getQuestionAnswers(@retrofit2.http.Path("id") int questionId, optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Answer>>);
    method @retrofit2.http.GET("questions/{id}/answers") public suspend Object? getQuestionAnswersAuth(@retrofit2.http.Path("id") int questionId, optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Answer>>);
    method @retrofit2.http.GET("questions/{id}") public suspend Object? getQuestionDetails(@retrofit2.http.Path("id") int questionId, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.GET("questions/{id}") public suspend Object? getQuestionDetailsAuth(@retrofit2.http.Path("id") int questionId, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.GET("questions") public suspend Object? getQuestions(optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.GET("questions") public suspend Object? getQuestionsByTags(optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.TAGGED_PARAM) String tags, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.GET("questions/{id}/related") public suspend Object? getRelatedQuestions(@retrofit2.http.Path("id") int questionId, optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("questions/{id}/answers/add") public suspend Object? postAnswer(@retrofit2.http.Path("id") int questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, @retrofit2.http.Field(me.tylerbwong.stack.api.service.QuestionService.BODY_PARAM) String bodyMarkdown, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.PostedAnswer>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("questions/{id}/downvote/undo") public suspend Object? undoQuestionDownvoteById(@retrofit2.http.Path("id") int questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("questions/{id}/favorite/undo") public suspend Object? undoQuestionFavoriteById(@retrofit2.http.Path("id") int questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("questions/{id}/upvote/undo") public suspend Object? undoQuestionUpvoteById(@retrofit2.http.Path("id") int questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.FormUrlEncoded @retrofit2.http.POST("questions/{id}/upvote") public suspend Object? upvoteQuestionById(@retrofit2.http.Path("id") int questionId, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional @retrofit2.http.Field(me.tylerbwong.stack.api.service.StackConstantsKt.PREVIEW_PARAM) boolean preview, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    field public static final String BODY_PARAM = "body";
    field public static final me.tylerbwong.stack.api.service.QuestionService.Companion Companion;
    field public static final String DEFAULT_FILTER = "!BKmYcFXnoJ*)bD9xee.1*pffbdPT9(";
    field public static final String DETAIL_FILTER = "!)aHQ9FGlxVZ-FDR2obogNxnqETJo9DXW96ZvzK5vlX6vPZyppY0(xIhvmblvbX1t7Ksu.RrM6rzoGU65Iq40VAPTIPb";
    field public static final String DETAIL_FILTER_AUTH = "!WIhweFOWj1JJVd8aIoXaKw_xBAvzlbepSsY*owj6SlEC.GRu4lutLm80gFJDfdinXuISFpMqUSyzm18iEZiHM";
    field public static final String TAGS_PARAM = "tags";
    field public static final String TITLE_PARAM = "title";
  }

  public static final class QuestionService.Companion {
  }

  public interface SearchService {
    method @retrofit2.http.GET("search/advanced") public suspend Object? search(@retrofit2.http.Query(me.tylerbwong.stack.api.service.SearchService.QUERY_PARAM) String query, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.SearchService.ACCEPTED_PARAM) Boolean? isAccepted, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.SearchService.ANSWERS_PARAM) Integer? minNumAnswers, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.SearchService.BODY_PARAM) String? bodyContains, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.SearchService.CLOSED_PARAM) Boolean? isClosed, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.SearchService.TAGGED_PARAM) String? tags, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.SearchService.TITLE_PARAM) String? titleContains, optional @me.tylerbwong.stack.api.model.Sort @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    field public static final String ACCEPTED_PARAM = "accepted";
    field public static final String ANSWERS_PARAM = "answers";
    field public static final String BODY_PARAM = "body";
    field public static final String CLOSED_PARAM = "closed";
    field public static final me.tylerbwong.stack.api.service.SearchService.Companion Companion;
    field public static final String QUERY_PARAM = "q";
    field public static final String TAGGED_PARAM = "tagged";
    field public static final String TITLE_PARAM = "title";
  }

  public static final class SearchService.Companion {
  }

  public interface SiteService {
    method @retrofit2.http.GET("sites") public suspend Object? getSites(optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Site>>);
    field public static final me.tylerbwong.stack.api.service.SiteService.Companion Companion;
    field public static final String DEFAULT_SITE_FILTER = "!Fn4IB7S7W()0gcwcuHN16kFhm9";
    field public static final int DEFAULT_SITE_PAGE_SIZE = 500; // 0x1f4
  }

  public static final class SiteService.Companion {
  }

  public final class StackConstantsKt {
    field public static final String DEFAULT_SITE = "stackoverflow";
    field public static final String SITE_PARAM = "site";
  }

  public interface TagService {
    method @retrofit2.http.GET("tags") public suspend Object? getPopularTags(optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.TagService.INNAME_PARAM) String? inname, optional @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Tag>>);
    method @retrofit2.http.GET("/me/tag-preferences") public suspend Object? getTagPreferences(optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.TagPreference>>);
    method @retrofit2.http.GET("tags/{tags}/info") public suspend Object? getTagsInfo(@retrofit2.http.Path(me.tylerbwong.stack.api.service.TagService.TAGS_PARAM) String tags, optional @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Tag>>);
    field public static final me.tylerbwong.stack.api.service.TagService.Companion Companion;
    field public static final String INNAME_PARAM = "inname";
    field public static final String TAGS_FILTER = "!0XrIP(5mCa0R7ys-I*Wa36*Jm";
    field public static final int TAGS_PAGE_SIZE = 30; // 0x1e
    field public static final String TAGS_PARAM = "tags";
    field public static final String TAGS_SORT = "popular";
    field public static final String TAG_PREFERENCES_FILTER = "!9eQ3TP1n-";
  }

  public static final class TagService.Companion {
  }

  public interface UserService {
    method @retrofit2.http.GET("users/{userId}/answers") public suspend Object? getAnswersByUserId(@retrofit2.http.Path(me.tylerbwong.stack.api.service.UserService.USER_ID) Integer? userId, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Answer>>);
    method @retrofit2.http.GET("me") public suspend Object? getCurrentUser(optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.User>>);
    method @retrofit2.http.GET("me/associated") public suspend Object? getCurrentUserNetworkUsers(optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.NetworkUser>>);
    method @retrofit2.http.GET("users/{userId}/questions") public suspend Object? getQuestionsByUserId(@retrofit2.http.Path(me.tylerbwong.stack.api.service.UserService.USER_ID) Integer? userId, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_PARAM) int page, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Question>>);
    method @retrofit2.http.GET("users/{userId}") public suspend Object? getUser(@retrofit2.http.Path(me.tylerbwong.stack.api.service.UserService.USER_ID) Integer? userId, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.User>>);
    method @retrofit2.http.GET("users/{userId}/badges") public suspend Object? getUserBadges(@retrofit2.http.Path(me.tylerbwong.stack.api.service.UserService.USER_ID) int userId, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.UserService.FROM_DATE) Long? fromDate, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.UserService.TO_DATE) Long? toDate, optional @retrofit2.http.Query(me.tylerbwong.stack.api.model.SortKt.SORT_PARAM) String sort, optional @me.tylerbwong.stack.api.model.Order @retrofit2.http.Query(me.tylerbwong.stack.api.model.OrderKt.ORDER_PARAM) String order, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.PAGE_SIZE_PARAM) int pageSize, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.Badge>>);
    method @retrofit2.http.GET("users/{userId}/timeline") public suspend Object? getUserTimeline(@retrofit2.http.Path(me.tylerbwong.stack.api.service.UserService.USER_ID) Integer? userId, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.UserService.FROM_DATE) Long? fromDate, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.UserService.TO_DATE) Long? toDate, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.FILTER_PARAM) String filter, optional @retrofit2.http.Query(me.tylerbwong.stack.api.service.StackConstantsKt.KEY_PARAM) String key, optional kotlin.coroutines.Continuation<? super me.tylerbwong.stack.api.model.Response<? extends me.tylerbwong.stack.api.model.TimelineEvent>>);
    field public static final String BADGE_FILTER = "!6JEV(YmXqRgSv";
    field public static final String BADGE_SORT = "rank";
    field public static final me.tylerbwong.stack.api.service.UserService.Companion Companion;
    field public static final String FROM_DATE = "fromdate";
    field public static final String NETWORK_USER_FILTER = "!6QN8I_HG8vPBU";
    field public static final String TIMELINE_FILTER = "!9_R5-D7KQ";
    field public static final String TO_DATE = "todate";
    field public static final String USER_FILTER = "!BTeL*Mb3d_KiD.hc7r8myHkxGjY*UT";
    field public static final String USER_ID = "userId";
  }

  public static final class UserService.Companion {
  }

}

package me.tylerbwong.stack.api.utils {

  public final class HttpExceptionKt {
    method public static me.tylerbwong.stack.api.model.ErrorResponse? toErrorResponse(retrofit2.HttpException);
    field public static final int ERROR_ID_INVALID_ACCESS_TOKEN = 402; // 0x192
  }

}

